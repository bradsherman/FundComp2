Brad Sherman
Fundamentals of Computing 2
Lab 1 Report

From a user perspective, they first see the board and player one is prompted to enter which column they would like to play. Then the screen is cleared and the updated board is displayed with player one's choice. Player two is then prompted to choose a column. This continues until a winner is found or until the board is full. Once a winner is found, the final board is displayed and a congratulations is given to the winning player.

Internally, the main program starts by declaring a board, and then inciting the play member function of the C4Board class. This function starts by intializing necessary variables, and then asking the users for their choice of playing. Each choice is checked to make sure it is a valid input. Before each prompt, the display member function is called which prints out a header labeling all the columns, and then displays each postion on the board using the array of C4Col's and the C4Col getDisc function. If a user's input is valid, the C4Col addDisc function is called based on which player played. 'X' for player 1 and 'O' for player 2. Once the disc is added the C4Board private member function checkWin() is called. This function goes through each spot on the board and looks for a position that has been played. Then for each 'X' or 'O' it finds, it will look at all 8 positions surrounding it to see if there is another matching character. If it finds one, a count variable is increased. At each new position the coordinate is checked to make sure it is still on the board. Once the count variable is 3 (three new positions + the original means connect 4), then the function returns 1. Otherwise it will return 0. This function is called after player one plays and after player 2 plays. If it returns one after player 1, the player variable is set to 1. This is so that I can display the winning player. After each check for a winner, the checkFull() private C4Board member function is called to see if the board is full. This function just looks to see if there are any '_' characters on the board since they are default. If there are none, that means there are only 'X's and 'O's, so the board is full and a 1 is returned, otherwise a 0 is returned. The final output changes based one whether the win or full variables are 1 or 0. 

This program was verified by playing it many times to make sure that many different 'connect 4's' were captured by the program. I also played with my friends to see if they noticed any flaws/bugs in the program.

The advantages of using a get function are that it allows additional functionality to be much easier to do later, and it protects your variables from change from the public. Keeping your variables private make it so that only you decide what is done with your variables through your member functions. It is also just good encapsulation technique.

Deconstructors are needed with dynamic memory management because otherwise memory leaks could occur. If no deconstructor is present then that memory is never reclaimed by the computer and a buildup of this could cause your computer to crash.
